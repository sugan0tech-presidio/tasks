// <auto-generated />
using AwesomeRequestTracker.Repos;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AwesomeRequestTracker.Migrations
{
    [DbContext(typeof(AwesomeRequestTrackerContext))]
    [Migration("20240512053532_Validations")]
    partial class Validations
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AwesomeRequestTracker.Models.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.HasKey("Id");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("AwesomeRequestTracker.Models.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Person");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("AwesomeRequestTracker.Models.Request", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("RequestRaisedById")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RequestRaisedById");

                    b.ToTable("Requests");
                });

            modelBuilder.Entity("AwesomeRequestTracker.Models.RequestFeedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.HasKey("Id");

                    b.ToTable("RequestFeedbacks");
                });

            modelBuilder.Entity("AwesomeRequestTracker.Models.RequestSolution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.HasKey("Id");

                    b.ToTable("RequestSolutions");
                });

            modelBuilder.Entity("AwesomeRequestTracker.Models.User", b =>
                {
                    b.HasBaseType("AwesomeRequestTracker.Models.Person");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("AwesomeRequestTracker.Models.Request", b =>
                {
                    b.HasOne("AwesomeRequestTracker.Models.Person", "RequestRaisedBy")
                        .WithMany()
                        .HasForeignKey("RequestRaisedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RequestRaisedBy");
                });

            modelBuilder.Entity("AwesomeRequestTracker.Models.User", b =>
                {
                    b.HasOne("AwesomeRequestTracker.Models.Person", null)
                        .WithOne()
                        .HasForeignKey("AwesomeRequestTracker.Models.User", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
