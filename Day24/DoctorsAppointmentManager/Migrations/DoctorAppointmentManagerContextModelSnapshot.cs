// <auto-generated />
using DoctorsAppointmentManager.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DoctorsAppointmentManager.Migrations
{
    [DbContext(typeof(DoctorAppointmentManagerContext))]
    partial class DoctorAppointmentManagerContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.19")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DoctorQualification", b =>
                {
                    b.Property<int>("DoctorsId")
                        .HasColumnType("int");

                    b.Property<int>("QualificationId")
                        .HasColumnType("int");

                    b.HasKey("DoctorsId", "QualificationId");

                    b.HasIndex("QualificationId");

                    b.ToTable("DoctorQualification");
                });

            modelBuilder.Entity("DoctorSpeciality", b =>
                {
                    b.Property<int>("DoctorsId")
                        .HasColumnType("int");

                    b.Property<int>("SpecialitiesId")
                        .HasColumnType("int");

                    b.HasKey("DoctorsId", "SpecialitiesId");

                    b.HasIndex("SpecialitiesId");

                    b.ToTable("DoctorSpeciality");
                });

            modelBuilder.Entity("DoctorsAppointmentManager.Models.Doctor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Experience")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.ToTable("Doctors");

                    b.HasData(
                        new
                        {
                            Id = 101,
                            Address = "1st street banglore, india",
                            ContactNumber = "885593323",
                            Email = "perumal@gmail.com",
                            Experience = 5,
                            Name = "Perumal"
                        },
                        new
                        {
                            Id = 102,
                            Address = "2st street banglore, india",
                            ContactNumber = "885593333",
                            Email = "uerumal@gmail.com",
                            Experience = 5,
                            Name = "uerumal"
                        });
                });

            modelBuilder.Entity("DoctorsAppointmentManager.Models.Qualification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Qualification");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "MBBS"
                        },
                        new
                        {
                            Id = 2,
                            Name = "MS"
                        },
                        new
                        {
                            Id = 3,
                            Name = "BDS"
                        },
                        new
                        {
                            Id = 4,
                            Name = "MD"
                        });
                });

            modelBuilder.Entity("DoctorsAppointmentManager.Models.Speciality", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Speciality");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Cardia"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Dental"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Neuro"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Ortho"
                        });
                });

            modelBuilder.Entity("DoctorQualification", b =>
                {
                    b.HasOne("DoctorsAppointmentManager.Models.Doctor", null)
                        .WithMany()
                        .HasForeignKey("DoctorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DoctorsAppointmentManager.Models.Qualification", null)
                        .WithMany()
                        .HasForeignKey("QualificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DoctorSpeciality", b =>
                {
                    b.HasOne("DoctorsAppointmentManager.Models.Doctor", null)
                        .WithMany()
                        .HasForeignKey("DoctorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DoctorsAppointmentManager.Models.Speciality", null)
                        .WithMany()
                        .HasForeignKey("SpecialitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
